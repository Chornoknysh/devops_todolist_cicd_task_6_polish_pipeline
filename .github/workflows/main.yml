name: python-deployment

run-name: ${{ github.actor }} • ${{ github.event_name }} • ${{ github.ref_name }} • ${{ github.sha }}

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: "Environment to deploy to (dev or staging)"
        type: choice
        options:
          - dev
          - staging
        required: true
        default: dev
      deploy_artifact:
        description: "Choose which artifact from matrix to deploy (ubuntu-3.8, ubuntu-3.9, windows-3.8, windows-3.9)"
        type: choice
        options:
          - ubuntu-3.8
          - ubuntu-3.9
          - windows-3.8
          - windows-3.9
        required: true
        default: ubuntu-3.8

env:
  PythonVersionDefault: 3.8
  DockerImageName: chornoknysh/todoapp   # <-- твій реальний DockerHub репозиторій
  ChartPath: ./helm-charts
  ReleaseNameDev: todo-dev
  ReleaseNameStaging: todo-staging
  NamespaceDev: todo-dev
  NamespaceStaging: todo-staging

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  python-ci:
    name: Python CI (${{ matrix.os }} • py${{ matrix.python }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python: [3.8, 3.9]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install coverage flake8
          pip install -r requirements.txt
        working-directory: ./todoapp

      - name: Run unit tests
        shell: bash
        run: python manage.py test
        working-directory: ./todoapp

      - name: Coverage report
        shell: bash
        run: |
          coverage run --source='.' manage.py test
          coverage report
        working-directory: ./todoapp

      - name: Linting
        shell: bash
        run: flake8 . --show-source --statistics --exit-zero
        working-directory: ./todoapp

      - name: Complexity check
        shell: bash
        run: flake8 . --exit-zero --max-complexity=6
        working-directory: ./todoapp

      - name: Upload CI artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-ci-${{ matrix.os == 'ubuntu-latest' && 'ubuntu' || 'windows' }}-${{ matrix.python }}
          path: ./todoapp

  docker-ci:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    needs: python-ci
    strategy:
      matrix:
        os: [ubuntu, windows]
        python: [3.8, 3.9]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./todoapp
          file: ./todoapp/Dockerfile
          push: true
          tags: |
            ${{ env.DockerImageName }}:${{ matrix.os }}-${{ matrix.python }}-${{ github.sha }}

  select-artifact:
    name: Select matrix artifact for deploy
    runs-on: ubuntu-latest
    needs: [docker-ci]
    outputs:
      selected_tag: ${{ steps.pick.outputs.selected_tag }}
      selected_name: ${{ steps.pick.outputs.selected_name }}
    steps:
      - id: pick
        run: |
          ARTIFACT_NAME="python-ci-${{ github.event.inputs.deploy_artifact }}"
          SELECTED_TAG="${{ github.event.inputs.deploy_artifact }}-${{ github.sha }}"
          echo "selected_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
          echo "selected_tag=$SELECTED_TAG" >> $GITHUB_OUTPUT

      - name: Download selected artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ steps.pick.outputs.selected_name }}
          path: ./selected-ci-artifact

      - name: Show selected artifact content
        run: ls -la ./selected-ci-artifact || true

  deploy:
    name: Deploy to ${{ github.event.inputs.deploy_environment || 'dev' }}
    needs: [select-artifact]
    uses: ./.github/workflows/reusable-deployment.yml
    with:
      environment: ${{ github.event.inputs.deploy_environment || 'dev' }}
      cluster_name: ${{ (github.event.inputs.deploy_environment || 'dev') == 'dev' && 'todo-dev' || 'todo-staging' }}
      namespace: ${{ (github.event.inputs.deploy_environment || 'dev') == 'dev' && env.NamespaceDev || env.NamespaceStaging }}
      chart_path: ${{ env.ChartPath }}
      release_name: ${{ (github.event.inputs.deploy_environment || 'dev') == 'dev' && env.ReleaseNameDev || env.ReleaseNameStaging }}
      image: ${{ env.DockerImageName }}
      image_tag: ${{ needs.select-artifact.outputs.selected_tag }}
    secrets: inherit
