name: reusable-deploy

on:
  workflow_call:
    inputs:
      environment:
        required: true
        description: "Environment to deploy to (dev|staging)"
        type: string
      cluster_name:
        required: true
        type: string
      namespace:
        required: true
        type: string
      chart_path:
        required: true
        type: string
      release_name:
        required: true
        type: string
      image:
        required: true
        type: string
      image_tag:
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install kind and kubectl
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.23.0/kind-linux-amd64
          chmod +x ./kind && sudo mv ./kind /usr/local/bin/kind
          sudo apt-get update && sudo apt-get install -y kubectl

      - name: Create kind cluster
        run: kind create cluster --name "${{ inputs.cluster_name }}" --config ./deploy/cluster.yml

      - name: Setup Helm
        uses: azure/setup-helm@v4.2.0

      - name: Helm dry-run install
        run: |
          helm dependency update "${{ inputs.chart_path }}" || true
          helm install "${{ inputs.release_name }}" "${{ inputs.chart_path }}" \
            --namespace "${{ inputs.namespace }}" --create-namespace \
            --set image.repository="${{ inputs.image }}" \
            --set image.tag="${{ inputs.image_tag }}" \
            --dry-run

      - name: Helm upgrade --install (atomic)
        run: |
          helm upgrade --install "${{ inputs.release_name }}" "${{ inputs.chart_path }}" \
            --namespace "${{ inputs.namespace }}" --create-namespace \
            --set image.repository="${{ inputs.image }}" \
            --set image.tag="${{ inputs.image_tag }}" \
            --atomic --wait --timeout 5m

      - name: Post-deploy status
        run: |
          helm status "${{ inputs.release_name }}" --namespace "${{ inputs.namespace }}" || true
          kubectl get all -n "${{ inputs.namespace }}" -o wide || true
